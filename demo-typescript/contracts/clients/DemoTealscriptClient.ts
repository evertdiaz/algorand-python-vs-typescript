/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "register(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getName()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createAsa()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optInToApplication()void": {
      "call_config": {
        "opt_in": "CALL"
      }
    },
    "registerEmployee(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getEmployeeName()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "employeeName": {
          "type": "bytes",
          "key": "employeeName"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "companyName": {
          "type": "bytes",
          "key": "companyName"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 1,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjg2LjAKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpjYWxsX09wdEluICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCWVycgoKLy8gcmVnaXN0ZXIoc3RyaW5nKXZvaWQKKmFiaV9yb3V0ZV9yZWdpc3RlcjoKCS8vIG5hbWU6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCgkvLyBleGVjdXRlIHJlZ2lzdGVyKHN0cmluZyl2b2lkCgljYWxsc3ViIHJlZ2lzdGVyCglpbnQgMQoJcmV0dXJuCgovLyByZWdpc3RlcihuYW1lOiBzdHJpbmcpOiB2b2lkCi8vCi8vIFJlZ2lzdGVyIHRoZSBuYW1lIG9mIHRoZSBjb21wYW55Ci8vCi8vIEBwYXJhbSBuYW1lCnJlZ2lzdGVyOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzL2RlbW8tdGVhbHNjcmlwdC5hbGdvLnRzOjE1CgkvLyB0aGlzLmNvbXBhbnlOYW1lLnZhbHVlID0gbmFtZQoJYnl0ZSAweDYzNmY2ZDcwNjE2ZTc5NGU2MTZkNjUgLy8gImNvbXBhbnlOYW1lIgoJZnJhbWVfZGlnIC0xIC8vIG5hbWU6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGdldE5hbWUoKXN0cmluZwoqYWJpX3JvdXRlX2dldE5hbWU6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgZ2V0TmFtZSgpc3RyaW5nCgljYWxsc3ViIGdldE5hbWUKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gZ2V0TmFtZSgpOiBzdHJpbmcKLy8KLy8gUmV0cmlldmVzIHRoZSByZWdpc3RlcmVkIG5hbWUKLy8KLy8gQHBhcmFtIG5hbWUKLy8gQHJldHVybnMgTmFtZSBvZiB0aGUgY29tcGFueQpnZXROYW1lOgoJcHJvdG8gMCAxCgoJLy8gY29udHJhY3RzL2RlbW8tdGVhbHNjcmlwdC5hbGdvLnRzOjI1CgkvLyByZXR1cm4gdGhpcy5jb21wYW55TmFtZS52YWx1ZTsKCWJ5dGUgMHg2MzZmNmQ3MDYxNmU3OTRlNjE2ZDY1IC8vICJjb21wYW55TmFtZSIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDIgMAoJcmV0c3ViCgovLyBjcmVhdGVBc2EoKXVpbnQ2NAoqYWJpX3JvdXRlX2NyZWF0ZUFzYToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBjcmVhdGVBc2EoKXVpbnQ2NAoJY2FsbHN1YiBjcmVhdGVBc2EKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBjcmVhdGVBc2EoKTogbnVtYmVyCi8vCi8vIFJldHJpZXZlcyB0aGUgcmVnaXN0ZXJlZCBuYW1lCi8vCi8vIEByZXR1cm5zIElEIG9mIHRoZSBjcmVhdGVkIEFTQQpjcmVhdGVBc2E6Cglwcm90byAwIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoKCS8vIGNvbnRyYWN0cy9kZW1vLXRlYWxzY3JpcHQuYWxnby50czozNAoJLy8gcmVnaXN0ZXJlZEFzYSA9IHNlbmRBc3NldENyZWF0aW9uKHsKCS8vICAgICAgIGNvbmZpZ0Fzc2V0VG90YWw6IDEsCgkvLyAgICAgICBjb25maWdBc3NldERlY2ltYWxzOiAwLAoJLy8gICAgICAgY29uZmlnQXNzZXREZWZhdWx0RnJvemVuOiAwLAoJLy8gICAgICAgY29uZmlnQXNzZXROYW1lOiB0aGlzLmNvbXBhbnlOYW1lLnZhbHVlLAoJLy8gICAgICAgY29uZmlnQXNzZXRVbml0TmFtZTogJ1RLTicsCgkvLyAgICAgICBmZWU6IDAsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBhY2ZnCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzL2RlbW8tdGVhbHNjcmlwdC5hbGdvLnRzOjM1CgkvLyBjb25maWdBc3NldFRvdGFsOiAxCglpbnQgMQoJaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCgoJLy8gY29udHJhY3RzL2RlbW8tdGVhbHNjcmlwdC5hbGdvLnRzOjM2CgkvLyBjb25maWdBc3NldERlY2ltYWxzOiAwCglpbnQgMAoJaXR4bl9maWVsZCBDb25maWdBc3NldERlY2ltYWxzCgoJLy8gY29udHJhY3RzL2RlbW8tdGVhbHNjcmlwdC5hbGdvLnRzOjM3CgkvLyBjb25maWdBc3NldERlZmF1bHRGcm96ZW46IDAKCWludCAwCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0RGVmYXVsdEZyb3plbgoKCS8vIGNvbnRyYWN0cy9kZW1vLXRlYWxzY3JpcHQuYWxnby50czozOAoJLy8gY29uZmlnQXNzZXROYW1lOiB0aGlzLmNvbXBhbnlOYW1lLnZhbHVlCglieXRlIDB4NjM2ZjZkNzA2MTZlNzk0ZTYxNmQ2NSAvLyAiY29tcGFueU5hbWUiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAyIDAKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCgoJLy8gY29udHJhY3RzL2RlbW8tdGVhbHNjcmlwdC5hbGdvLnRzOjM5CgkvLyBjb25maWdBc3NldFVuaXROYW1lOiAnVEtOJwoJYnl0ZSAweDU0NGI0ZSAvLyAiVEtOIgoJaXR4bl9maWVsZCBDb25maWdBc3NldFVuaXROYW1lCgoJLy8gY29udHJhY3RzL2RlbW8tdGVhbHNjcmlwdC5hbGdvLnRzOjQwCgkvLyBmZWU6IDAKCWludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gQ3JlYXRlZEFzc2V0SUQKCWZyYW1lX2J1cnkgMCAvLyByZWdpc3RlcmVkQXNhOiB1aW50NjQKCgkvLyBjb250cmFjdHMvZGVtby10ZWFsc2NyaXB0LmFsZ28udHM6NDIKCS8vIHJldHVybiByZWdpc3RlcmVkQXNhLmlkOwoJZnJhbWVfZGlnIDAgLy8gcmVnaXN0ZXJlZEFzYTogdWludDY0CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCglyZXRzdWIKCi8vIG9wdEluVG9BcHBsaWNhdGlvbigpdm9pZAoqYWJpX3JvdXRlX29wdEluVG9BcHBsaWNhdGlvbjoKCS8vIGV4ZWN1dGUgb3B0SW5Ub0FwcGxpY2F0aW9uKCl2b2lkCgljYWxsc3ViIG9wdEluVG9BcHBsaWNhdGlvbgoJaW50IDEKCXJldHVybgoKLy8gb3B0SW5Ub0FwcGxpY2F0aW9uKCk6IHZvaWQKb3B0SW5Ub0FwcGxpY2F0aW9uOgoJcHJvdG8gMCAwCglyZXRzdWIKCi8vIHJlZ2lzdGVyRW1wbG95ZWUoc3RyaW5nKXZvaWQKKmFiaV9yb3V0ZV9yZWdpc3RlckVtcGxveWVlOgoJLy8gbmFtZTogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgcmVnaXN0ZXJFbXBsb3llZShzdHJpbmcpdm9pZAoJY2FsbHN1YiByZWdpc3RlckVtcGxveWVlCglpbnQgMQoJcmV0dXJuCgovLyByZWdpc3RlckVtcGxveWVlKG5hbWU6IHN0cmluZyk6IHZvaWQKLy8KLy8gUmVnaXN0ZXIgQW4gaW5kaXZpZHVhbCBuYW1lCi8vCi8vIEBwYXJhbSBuYW1lCnJlZ2lzdGVyRW1wbG95ZWU6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHMvZGVtby10ZWFsc2NyaXB0LmFsZ28udHM6NTMKCS8vIHRoaXMuZW1wbG95ZWVOYW1lKHRoaXMudHhuLnNlbmRlcikudmFsdWUgPSBuYW1lCgl0eG4gU2VuZGVyCglieXRlIDB4NjU2ZDcwNmM2Zjc5NjU2NTRlNjE2ZDY1IC8vICJlbXBsb3llZU5hbWUiCglmcmFtZV9kaWcgLTEgLy8gbmFtZTogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJYXBwX2xvY2FsX3B1dAoJcmV0c3ViCgovLyBnZXRFbXBsb3llZU5hbWUoKXN0cmluZwoqYWJpX3JvdXRlX2dldEVtcGxveWVlTmFtZToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gZXhlY3V0ZSBnZXRFbXBsb3llZU5hbWUoKXN0cmluZwoJY2FsbHN1YiBnZXRFbXBsb3llZU5hbWUKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gZ2V0RW1wbG95ZWVOYW1lKCk6IHN0cmluZwovLwovLyBSZXRyaWV2ZXMgdGhlIHJlZ2lzdGVyZWQgbmFtZQovLwovLyBAcGFyYW0gbmFtZQovLyBAcmV0dXJucyBOYW1lIG9mIHRoZSBlbXBsb3llZQpnZXRFbXBsb3llZU5hbWU6Cglwcm90byAwIDEKCgkvLyBjb250cmFjdHMvZGVtby10ZWFsc2NyaXB0LmFsZ28udHM6NjMKCS8vIHJldHVybiB0aGlzLmVtcGxveWVlTmFtZSh0aGlzLnR4bi5zZW5kZXIpLnZhbHVlOwoJdHhuIFNlbmRlcgoJYnl0ZSAweDY1NmQ3MDZjNmY3OTY1NjU0ZTYxNmQ2NSAvLyAiZW1wbG95ZWVOYW1lIgoJYXBwX2xvY2FsX2dldAoJZXh0cmFjdCAyIDAKCXJldHN1YgoKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCWludCAxCglyZXR1cm4KCipjcmVhdGVfTm9PcDoKCW1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgllcnIKCipjYWxsX05vT3A6CgltZXRob2QgInJlZ2lzdGVyKHN0cmluZyl2b2lkIgoJbWV0aG9kICJnZXROYW1lKClzdHJpbmciCgltZXRob2QgImNyZWF0ZUFzYSgpdWludDY0IgoJbWV0aG9kICJyZWdpc3RlckVtcGxveWVlKHN0cmluZyl2b2lkIgoJbWV0aG9kICJnZXRFbXBsb3llZU5hbWUoKXN0cmluZyIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfcmVnaXN0ZXIgKmFiaV9yb3V0ZV9nZXROYW1lICphYmlfcm91dGVfY3JlYXRlQXNhICphYmlfcm91dGVfcmVnaXN0ZXJFbXBsb3llZSAqYWJpX3JvdXRlX2dldEVtcGxveWVlTmFtZQoJZXJyCgoqY2FsbF9PcHRJbjoKCW1ldGhvZCAib3B0SW5Ub0FwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9vcHRJblRvQXBwbGljYXRpb24KCWVycg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "DemoTealscript",
    "desc": "",
    "methods": [
      {
        "name": "register",
        "desc": "Register the name of the company",
        "args": [
          {
            "name": "name",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getName",
        "desc": "Retrieves the registered name",
        "args": [],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "createAsa",
        "desc": "Retrieves the registered name",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "ID of the created ASA"
        }
      },
      {
        "name": "optInToApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "registerEmployee",
        "desc": "Register An individual name",
        "args": [
          {
            "name": "name",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getEmployeeName",
        "desc": "Retrieves the registered name",
        "args": [],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the DemoTealscript smart contract.
 */
export type DemoTealscript = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'register(string)void' | 'register', {
      argsObj: {
        name: string
      }
      argsTuple: [name: string]
      returns: void
    }>
    & Record<'getName()string' | 'getName', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'createAsa()uint64' | 'createAsa', {
      argsObj: {
      }
      argsTuple: []
      /**
       * ID of the created ASA
       */
      returns: bigint
    }>
    & Record<'optInToApplication()void' | 'optInToApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'registerEmployee(string)void' | 'registerEmployee', {
      argsObj: {
        name: string
      }
      argsTuple: [name: string]
      returns: void
    }>
    & Record<'getEmployeeName()string' | 'getEmployeeName', {
      argsObj: {
      }
      argsTuple: []
      returns: string
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'companyName'?: BinaryState
    }
    local: {
      'employeeName'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type DemoTealscriptSig = keyof DemoTealscript['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends DemoTealscriptSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the DemoTealscript smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends DemoTealscriptSig> = DemoTealscript['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DemoTealscript smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DemoTealscriptSig> = DemoTealscript['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type DemoTealscriptCreateCalls = (typeof DemoTealscriptCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type DemoTealscriptCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type DemoTealscriptDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: DemoTealscriptCreateCalls) => DemoTealscriptCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class DemoTealscriptCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the DemoTealscript smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the DemoTealscript smart contract using the optInToApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'optInToApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the register(string)void ABI method
   *
   * Register the name of the company
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static register(args: MethodArgs<'register(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'register(string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getName()string ABI method
   *
   * Retrieves the registered name
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getName(args: MethodArgs<'getName()string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getName()string' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createAsa()uint64 ABI method
   *
   * Retrieves the registered name
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createAsa(args: MethodArgs<'createAsa()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createAsa()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the registerEmployee(string)void ABI method
   *
   * Register An individual name
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static registerEmployee(args: MethodArgs<'registerEmployee(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'registerEmployee(string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.name],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getEmployeeName()string ABI method
   *
   * Retrieves the registered name
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getEmployeeName(args: MethodArgs<'getEmployeeName()string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getEmployeeName()string' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the DemoTealscript smart contract
 */
export class DemoTealscriptClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `DemoTealscriptClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof DemoTealscript['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the DemoTealscript smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: DemoTealscriptDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(DemoTealscriptCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the DemoTealscript smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(DemoTealscriptCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the DemoTealscript smart contract using the optInToApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The optIn result
       */
      async optInToApplication(args: MethodArgs<'optInToApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'optInToApplication()void'>>(await $this.appClient.optIn(DemoTealscriptCallFactory.optIn.optInToApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the DemoTealscript smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the register(string)void ABI method.
   *
   * Register the name of the company
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public register(args: MethodArgs<'register(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DemoTealscriptCallFactory.register(args, params))
  }

  /**
   * Calls the getName()string ABI method.
   *
   * Retrieves the registered name
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getName(args: MethodArgs<'getName()string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DemoTealscriptCallFactory.getName(args, params))
  }

  /**
   * Calls the createAsa()uint64 ABI method.
   *
   * Retrieves the registered name
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: ID of the created ASA
   */
  public createAsa(args: MethodArgs<'createAsa()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DemoTealscriptCallFactory.createAsa(args, params))
  }

  /**
   * Calls the registerEmployee(string)void ABI method.
   *
   * Register An individual name
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public registerEmployee(args: MethodArgs<'registerEmployee(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DemoTealscriptCallFactory.registerEmployee(args, params))
  }

  /**
   * Calls the getEmployeeName()string ABI method.
   *
   * Retrieves the registered name
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getEmployeeName(args: MethodArgs<'getEmployeeName()string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DemoTealscriptCallFactory.getEmployeeName(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<DemoTealscript['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get companyName() {
        return DemoTealscriptClient.getBinaryState(state, 'companyName')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<DemoTealscript['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get employeeName() {
        return DemoTealscriptClient.getBinaryState(state, 'employeeName')
      },
    }
  }

  public compose(): DemoTealscriptComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      register(args: MethodArgs<'register(string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.register(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getName(args: MethodArgs<'getName()string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getName(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createAsa(args: MethodArgs<'createAsa()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createAsa(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      registerEmployee(args: MethodArgs<'registerEmployee(string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.registerEmployee(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getEmployeeName(args: MethodArgs<'getEmployeeName()string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getEmployeeName(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get optIn() {
        const $this = this
        return {
          optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.optIn.optInToApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as DemoTealscriptComposer
  }
}
export type DemoTealscriptComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the register(string)void ABI method.
   *
   * Register the name of the company
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  register(args: MethodArgs<'register(string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DemoTealscriptComposer<[...TReturns, MethodReturn<'register(string)void'>]>

  /**
   * Calls the getName()string ABI method.
   *
   * Retrieves the registered name
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getName(args: MethodArgs<'getName()string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DemoTealscriptComposer<[...TReturns, MethodReturn<'getName()string'>]>

  /**
   * Calls the createAsa()uint64 ABI method.
   *
   * Retrieves the registered name
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createAsa(args: MethodArgs<'createAsa()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DemoTealscriptComposer<[...TReturns, MethodReturn<'createAsa()uint64'>]>

  /**
   * Calls the registerEmployee(string)void ABI method.
   *
   * Register An individual name
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerEmployee(args: MethodArgs<'registerEmployee(string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DemoTealscriptComposer<[...TReturns, MethodReturn<'registerEmployee(string)void'>]>

  /**
   * Calls the getEmployeeName()string ABI method.
   *
   * Retrieves the registered name
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getEmployeeName(args: MethodArgs<'getEmployeeName()string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DemoTealscriptComposer<[...TReturns, MethodReturn<'getEmployeeName()string'>]>

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the DemoTealscript smart contract using the optInToApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optInToApplication(args: MethodArgs<'optInToApplication()void'>, params?: AppClientComposeCallCoreParams): DemoTealscriptComposer<[...TReturns, MethodReturn<'optInToApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the DemoTealscript smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): DemoTealscriptComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): DemoTealscriptComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<DemoTealscriptComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<DemoTealscriptComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type DemoTealscriptComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type DemoTealscriptComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
