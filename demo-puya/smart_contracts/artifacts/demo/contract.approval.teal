#pragma version 10

smart_contracts.demo.contract.Demo.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // smart_contracts/demo/contract.py:4
    // class Demo(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@9
    method "register(string)void"
    method "get_name()string"
    method "create_asa()uint64"
    txna ApplicationArgs 0
    match main_register_route@4 main_get_name_route@5 main_create_asa_route@6
    err // reject transaction

main_register_route@4:
    // smart_contracts/demo/contract.py:9
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    // smart_contracts/demo/contract.py:4
    // class Demo(ARC4Contract):
    txna ApplicationArgs 1
    // smart_contracts/demo/contract.py:9
    // @arc4.abimethod()
    callsub register
    int 1
    return

main_get_name_route@5:
    // smart_contracts/demo/contract.py:13
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub get_name
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_create_asa_route@6:
    // smart_contracts/demo/contract.py:17
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub create_asa
    byte 0x151f7c75
    swap
    concat
    log
    int 1
    return

main_bare_routing@9:
    // smart_contracts/demo/contract.py:4
    // class Demo(ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// smart_contracts.demo.contract.Demo.register(name: bytes) -> void:
register:
    // smart_contracts/demo/contract.py:9-10
    // @arc4.abimethod()
    // def register(self, name: arc4.String) -> None:
    proto 1 0
    // smart_contracts/demo/contract.py:11
    // self.company_name = name.decode()
    frame_dig -1
    extract 2 0
    byte "company_name"
    swap
    app_global_put
    retsub


// smart_contracts.demo.contract.Demo.get_name() -> bytes:
get_name:
    // smart_contracts/demo/contract.py:13-14
    // @arc4.abimethod()
    // def get_name(self) -> arc4.String:
    proto 0 1
    // smart_contracts/demo/contract.py:15
    // return arc4.String.encode(self.company_name)
    int 0
    byte "company_name"
    app_global_get_ex
    assert // check value exists
    dup
    len
    itob
    extract 6 2
    swap
    concat
    retsub


// smart_contracts.demo.contract.Demo.create_asa() -> bytes:
create_asa:
    // smart_contracts/demo/contract.py:17-18
    // @arc4.abimethod()
    // def create_asa(self) -> arc4.UInt64:
    proto 0 1
    // smart_contracts/demo/contract.py:20-28
    // itxn.AssetConfig(
    //     total=1,
    //     decimals=0,
    //     default_frozen=False,
    //     asset_name=self.company_name,
    //     unit_name=b"TKN",
    //     fee=0,
    // )
    // .submit()
    itxn_begin
    // smart_contracts/demo/contract.py:24
    // asset_name=self.company_name,
    int 0
    byte "company_name"
    app_global_get_ex
    assert // check value exists
    // smart_contracts/demo/contract.py:25
    // unit_name=b"TKN",
    byte "TKN"
    itxn_field ConfigAssetUnitName
    // smart_contracts/demo/contract.py:20
    // itxn.AssetConfig(
    int acfg
    itxn_field TypeEnum
    // smart_contracts/demo/contract.py:21
    // total=1,
    int 1
    itxn_field ConfigAssetTotal
    // smart_contracts/demo/contract.py:26
    // fee=0,
    int 0
    itxn_field Fee
    // smart_contracts/demo/contract.py:23
    // default_frozen=False,
    int 0
    itxn_field ConfigAssetDefaultFrozen
    // smart_contracts/demo/contract.py:22
    // decimals=0,
    int 0
    itxn_field ConfigAssetDecimals
    itxn_field ConfigAssetName
    // smart_contracts/demo/contract.py:20-28
    // itxn.AssetConfig(
    //     total=1,
    //     decimals=0,
    //     default_frozen=False,
    //     asset_name=self.company_name,
    //     unit_name=b"TKN",
    //     fee=0,
    // )
    // .submit()
    itxn_submit
    // smart_contracts/demo/contract.py:19
    // self.created_asset_id = (
    byte "created_asset_id"
    // smart_contracts/demo/contract.py:20-28
    // itxn.AssetConfig(
    //     total=1,
    //     decimals=0,
    //     default_frozen=False,
    //     asset_name=self.company_name,
    //     unit_name=b"TKN",
    //     fee=0,
    // )
    // .submit()
    itxn CreatedAssetID
    // smart_contracts/demo/contract.py:19-30
    // self.created_asset_id = (
    //     itxn.AssetConfig(
    //         total=1,
    //         decimals=0,
    //         default_frozen=False,
    //         asset_name=self.company_name,
    //         unit_name=b"TKN",
    //         fee=0,
    //     )
    //     .submit()
    //     .created_asset.asset_id
    // )
    app_global_put
    // smart_contracts/demo/contract.py:31
    // return arc4.UInt64(self.created_asset_id)
    int 0
    byte "created_asset_id"
    app_global_get_ex
    assert // check value exists
    itob
    retsub


// smart_contracts.demo.contract.Demo.__init__() -> void:
__init__:
    // smart_contracts/demo/contract.py:5
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/demo/contract.py:6
    // self.company_name = Bytes()
    byte "company_name"
    byte ""
    app_global_put
    retsub
