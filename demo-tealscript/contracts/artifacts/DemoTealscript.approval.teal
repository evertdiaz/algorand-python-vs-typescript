#pragma version 10

// This TEAL was generated by TEALScript v0.86.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// register(string)void
*abi_route_register:
	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute register(string)void
	callsub register
	int 1
	return

// register(name: string): void
//
// Register the name of the company
//
// @param name
register:
	proto 1 0

	// contracts/demo-tealscript.algo.ts:13
	// this.companyName.value = name
	byte 0x636f6d70616e794e616d65 // "companyName"
	frame_dig -1 // name: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// getName()string
*abi_route_getName:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getName()string
	callsub getName
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// getName(): string
//
// Retrieves the registered name
//
// @param name
// @returns Name of the company
getName:
	proto 0 1

	// contracts/demo-tealscript.algo.ts:23
	// return this.companyName.value;
	byte 0x636f6d70616e794e616d65 // "companyName"
	app_global_get
	extract 2 0
	retsub

// createAsa()uint64
*abi_route_createAsa:
	// The ABI return prefix
	byte 0x151f7c75

	// execute createAsa()uint64
	callsub createAsa
	itob
	concat
	log
	int 1
	return

// createAsa(): number
//
// Retrieves the registered name
//
// @returns ID of the created ASA
createAsa:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/demo-tealscript.algo.ts:33
	// registeredAsa = sendAssetCreation({
	//       configAssetTotal: 1,
	//       configAssetDecimals: 0,
	//       configAssetDefaultFrozen: 0,
	//       configAssetName: this.companyName.value,
	//       configAssetUnitName: 'TKN',
	//       fee: 0,
	//     })
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// contracts/demo-tealscript.algo.ts:34
	// configAssetTotal: 1
	int 1
	itxn_field ConfigAssetTotal

	// contracts/demo-tealscript.algo.ts:35
	// configAssetDecimals: 0
	int 0
	itxn_field ConfigAssetDecimals

	// contracts/demo-tealscript.algo.ts:36
	// configAssetDefaultFrozen: 0
	int 0
	itxn_field ConfigAssetDefaultFrozen

	// contracts/demo-tealscript.algo.ts:37
	// configAssetName: this.companyName.value
	byte 0x636f6d70616e794e616d65 // "companyName"
	app_global_get
	extract 2 0
	itxn_field ConfigAssetName

	// contracts/demo-tealscript.algo.ts:38
	// configAssetUnitName: 'TKN'
	byte 0x544b4e // "TKN"
	itxn_field ConfigAssetUnitName

	// contracts/demo-tealscript.algo.ts:39
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury 0 // registeredAsa: uint64

	// contracts/demo-tealscript.algo.ts:41
	// return registeredAsa.id;
	frame_dig 0 // registeredAsa: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "register(string)void"
	method "getName()string"
	method "createAsa()uint64"
	txna ApplicationArgs 0
	match *abi_route_register *abi_route_getName *abi_route_createAsa
	err